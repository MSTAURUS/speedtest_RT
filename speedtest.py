import argparse
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from datetime import datetime
import gc
import psutil


class SpeedTestRT:
    def __init__(self, debug=True):
        self.test_start_time = None
        self.driver = None
        self.debug = debug
        self.setup_driver()

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞"""
        chrome_options = Options()
        # –í–∫–ª—é—á–∞–µ–º headless-—Ä–µ–∂–∏–º
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        chrome_options.add_argument(
            "--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--window-size=1920,1080")

        try:
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Chrome: {e}")
            return False
        return True

    def log(self, message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏"""
        if self.debug:
            print(message)

    def run_test(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        self.test_start_time = datetime.now()
        self.log("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Å–∫–æ—Ä–æ—Å—Ç–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º...")

        try:
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–∞–π—Ç
            self.driver.get("https://speedtest.rt.ru/")
            time.sleep(5)

            stop_buttons = ["//*[contains(text(), '–ü—Ä–µ—Ä–≤–∞—Ç—å')]"]

            button_found = False
            for xpath in stop_buttons:
                try:
                    WebDriverWait(self.driver, 5).until(
                        EC.element_to_be_clickable((By.XPATH, xpath))
                    )

                    self.log("‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã —Ç–µ—Å—Ç–∞ –Ω–∞–π–¥–µ–Ω–∞")
                    button_found = True
                    break
                except:
                    continue

            # –ñ–¥–µ–º –∏ —Å–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if button_found:
                return self.wait_for_results()

            return None

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return None

    def wait_for_results(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞"""
        self.log("‚è≥ –ò–∑–º–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å...")

        results = {'download': None, 'upload': None, 'ping': None, 'jitter': None}
        max_wait = 180  # –ú–∞–∫—Å–∏–º—É–º 3 –º–∏–Ω—É—Ç—ã
        start_time = time.time()

        while time.time() - start_time < max_wait:
            try:
                # –ò—â–µ–º –ø–∏–Ω–≥ –≤ –±–ª–æ–∫–µ latency-wrapper
                ping_elements = self.driver.find_elements(By.CSS_SELECTOR, ".latency-wrapper__value")
                if ping_elements:
                    try:
                        results['ping'] = int(ping_elements[0].text)
                        self.log(f"üì° –ü–∏–Ω–≥: {results['ping']} –º—Å")
                    except ValueError:
                        pass

                # –ò—â–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏ –≤ –±–ª–æ–∫–µ indicator__text
                speed_elements = self.driver.find_elements(By.CSS_SELECTOR, ".indicator__text")
                speed_values = []

                for element in speed_elements:
                    try:
                        speed = float(element.text.strip())
                        speed_values.append(speed)
                    except ValueError:
                        continue

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏, —á—Ç–æ –æ–∑–Ω–∞—á–∞—é—Ç
                if speed_values:
                    # –ü–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –ó–∞–≥—Ä—É–∑–∫–∞ (download)
                    results['download'] = speed_values[0]
                    self.log(f"‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞: {results['download']} –ú–±–∏—Ç/—Å")

                    # –í—Ç–æ—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –û—Ç–¥–∞—á–∞ (upload)
                    if len(speed_values) > 1:
                        results['upload'] = speed_values[1]
                        self.log(f"‚¨ÜÔ∏è  –û—Ç–¥–∞—á–∞: {results['upload']} –ú–±–∏—Ç/—Å")

                    # –¢—Ä–µ—Ç—å–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –î–∂–∏—Ç—Ç–µ—Ä
                    if len(speed_values) > 2:
                        results['jitter'] = speed_values[2]
                        self.log(f"üìä –î–∂–∏—Ç—Ç–µ—Ä: {results['jitter']} –º—Å")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —Ç–µ—Å—Ç (–≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã)
                if all(results.values()):
                    self.log("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
                    return results

                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
                progress_bars = self.driver.find_elements(By.CSS_SELECTOR, ".indicator__progress span")
                if progress_bars and all(
                        "transform: translateX(0%)" in bar.get_attribute("style") for bar in progress_bars):
                    self.log("‚úÖ –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
                    return results

                time.sleep(2)

            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}")
                time.sleep(2)

        self.log("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        return results

    def save_to_file(self, results, filename="speedtest_results.txt"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            start_time_str = self.test_start_time.strftime("%d.%m.%Y %H:%M:%S")

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏
            result_line = (
                f"{start_time_str} | "
                f"–ó–∞–≥—Ä—É–∑–∫–∞: {results['download'] or 'N/A'} –ú–±–∏—Ç/—Å | "
                f"–û—Ç–¥–∞—á–∞: {results['upload'] or 'N/A'} –ú–±–∏—Ç/—Å | "
                f"–ü–∏–Ω–≥: {results['ping'] or 'N/A'} –º—Å | "
                f"–î–∂–∏—Ç—Ç–µ—Ä: {results['jitter'] or 'N/A'} ms\n"
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
            with open(filename, "a", encoding="utf-8") as f:
                f.write(result_line)

            self.log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {filename}")
            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {e}")
            return False

    def display_results(self, results):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞
        start_time_str = self.test_start_time.strftime("%d.%m.%Y %H:%M:%S")

        print("\n" + "=" * 50)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê –°–ö–û–†–û–°–¢–ò ({start_time_str})")
        print("=" * 50)

        if results['download'] is not None:
            print(f"‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞: {results['download']} –ú–±–∏—Ç/—Å")
        else:
            print("‚¨áÔ∏è  –ó–∞–≥—Ä—É–∑–∫–∞: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–æ")

        if results['upload'] is not None:
            print(f"‚¨ÜÔ∏è  –û—Ç–¥–∞—á–∞: {results['upload']} –ú–±–∏—Ç/—Å")
        else:
            print("‚¨ÜÔ∏è  –û—Ç–¥–∞—á–∞: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω–æ")

        if results['ping'] is not None:
            print(f"üì° –ü–∏–Ω–≥: {results['ping']} –º—Å")
        else:
            print("üì° –ü–∏–Ω–≥: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω")

        if results['jitter'] is not None:
            print(f"üìä –î–∂–∏—Ç—Ç–µ—Ä: {results['jitter']} ms")
        else:
            print("üìä –î–∂–∏—Ç—Ç–µ—Ä: –Ω–µ –∏–∑–º–µ—Ä–µ–Ω")

        print("=" * 50)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª
        self.save_to_file(results)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.log("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤...")

        if self.driver:
            try:
                self.driver.quit()
                self.driver = None
                self.log("‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –º—É—Å–æ—Ä–∞
        gc.collect()
        self.log("‚úÖ –°–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome
        self.kill_chrome_processes()

    def kill_chrome_processes(self):
        """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã Chrome"""
        try:
            for proc in psutil.process_iter(['pid', 'name']):
                try:
                    if 'chrome' in proc.info['name'].lower():
                        proc.terminate()
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    pass
            self.log("‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã Chrome –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        except Exception as e:
            self.log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Chrome: {e}")


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description='–¢–µ—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='–í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    parser.add_argument('-t', '--timeout', type=int, default=0,
                        help='–¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)')

    return parser.parse_args()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –¢–µ—Å—Ç–µ—Ä —Å–∫–æ—Ä–æ—Å—Ç–∏ –†–æ—Å—Ç–µ–ª–µ–∫–æ–º")

    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    args = parse_arguments()

    debug_mode = args.debug
    timeout_minutes = args.timeout
    run_count = 0


    print(f"‚è∞ –¢–∞–π–º–∞—É—Ç –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏: {timeout_minutes} –º–∏–Ω—É—Ç")
    print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    print("–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n")

    try:
        while True:
            run_count += 1
            current_time = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
            print(f"\nüåÄ –ó–∞–ø—É—Å–∫ #{run_count} - {current_time}")

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
            test = SpeedTestRT(debug=debug_mode)

            if not test.driver:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä")
                break

            try:
                results = test.run_test()
                if results:
                    test.display_results(results)
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞: {e}")
            finally:
                # –í—Å–µ–≥–¥–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
                test.cleanup()
                del test
                gc.collect()

            # –û–∂–∏–¥–∞–Ω–∏–µ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
            if debug_mode:
                print(f"\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {timeout_minutes} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")

            if timeout_minutes == 0:
                break

            # –û–∂–∏–¥–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è
            for i in range(timeout_minutes * 60):
                time.sleep(1)
                # –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏
                if debug_mode and i % 60 == 0 and i > 0:
                    minutes_passed = i // 60
                    print(f"‚è∞ –ü—Ä–æ—à–ª–æ {minutes_passed} –º–∏–Ω—É—Ç...")

    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print(f"üìä –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {run_count}")
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")


if __name__ == "__main__":
    main()
